* Org
** Basics
*** User email address
    #+begin_src emacs-lisp
      (setq user-mail-address "lsg6140@gmail.com")
    #+end_src
*** Make Text mode the default mode for new buffers
    #+begin_src emacs-lisp
      (setq-default major-mode 'text-mode)
    #+end_src
*** Agenda files
    #+begin_src emacs-lisp
      (setq org-agenda-file (list "~/.emacs.d/todo.org"))
    #+end_src
** MELPA 
   [[https://melpa.org/#/getting-started][Getting started]].
   #+begin_src emacs-lisp
     (require 'package)

     (package-initialize)
   #+end_src

   #+RESULTS:

** Babel
*** Supported languages
  Machine specific path such as
   #+begin_example
     (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
   #+end_example
 is placed at ~$HOME/spacemacs/.emacs.d/init.el~.
   #+begin_src emacs-lisp
     (setq org-src-fontify-natively t)
     (setq org-confirm-babel-evaluate nil)

     ;; fix an incompatibility between the ob-async and ob-ipython pacakges
     (setq ob-async-no-async-languages-alist '("ipython"))

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((C . t)
        (shell . t)
        (emacs-lisp . t)
        (latex . t)
        (python . t)
        (R . t)
        (octave . t)
        (ditaa . t)
        (ruby . t)
        (haskell . t)
        (java . t)
        )
      )
   #+end_src
*** ob-async 
   [[https://github.com/astahlman/ob-async][ob-async]].
   =ob-async= is available in MELPA.
   Require the package and =ob-async= will handle any source block which includes =:async= in its header-args.
   #+begin_src emacs-lisp
     dotspacemacs-additional-packages '(ob-async)
     ;;(require 'ob-async)
   #+end_src

*** Easy templates
   Org 9.2 comes with a new template expansion mechanism, combining ~org-insert-structure-template~ bound to ~C-c C-comma~. Previous patterns such as ~<s TAB~ can be activated by requiring Org Tempo library ([[https://orgmode.org/Changes.html#org1b5e967][Imcompatible changes]]).

   #+begin_src emacs-lisp
     (require 'org-tempo)
   #+end_src

   More templates can added by customizing the variable ~org-structure-template-alist~. To enable complex templates, ~tempo-define-template~ function or Yasnippet are useful.

   ! ~org-structure-template-alist~ only works for blocks. [[https://emacs.stackexchange.com/questions/46795/is-it-possible-to-add-templates-other-than-begin-end-to-org-structure-temp][check here]].

   ~<n~ is added to insert ~#+name:~ before code block.

   #+begin_src emacs-lisp
   (tempo-define-template "code-block-with-name"
                          '(> "#+name: " p
                            n> "#+begin_src"
                            n> "#+end_src")
                          "<n"
                          "Insert 'name' line for code block")
   #+end_src
   
   ~<cpp~ is added to insert C++ code block.

   #+begin_src emacs-lisp
   (tempo-define-template "code-block-with-name"
                          '(> "#+name: " p
                            n> "#+begin_src C++ :main no"
                            n> "#+end_src")
                          "<cpp"
                          "Insert C++ code block")
   #+end_src

   ~<P~ is added to insert property drawer.
   #+begin_src emacs-lisp
     (tempo-define-template "property-drawer"
                            '(> ":PROPERTIES:"
                                n> ":" p
                                n> ":END:")
                            "<P")
   #+end_src

*** Misc
   In C++ mode, typing single quotation mark ' inserts \\'\\'. This is caused by automatic escaping. Details can be found at [[https://smartparens.readthedocs.io/en/latest/automatic-escaping.html][smartparens]].
   #+begin_src emacs-lisp
     (setq-default sp-escape-quotes-after-insert nil)
   #+end_src

** Line visual
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook 'visual-line-mode)
     (add-hook 'text-mode-hook 'visual-line-mode)
   #+end_src

   #+RESULTS:

** Key bindings
*** Open personal files
    #+begin_src emacs-lisp
      (spacemacs/declare-prefix "o" "own-menu")
      (spacemacs/set-leader-keys "oi" (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))
      (spacemacs/set-leader-keys "oe" (lambda () (interactive) (find-file "~/spacemacs/.emacs.d/init.el")))
      (spacemacs/set-leader-keys "ot" (lambda () (interactive) (find-file "~/.emacs.d/todo.org")))
    #+end_src

    #+RESULTS:

*** Bind F4 for tangle
    #+begin_src emacs-lisp
     (define-key org-mode-map (kbd "<f4>")'org-babel-tangle)
    #+end_src

   #+RESULTS:
   : org-babel-tangle
** Capture templates
   %-escape allow dynamic insertion of content. Details can be found [[https://www.gnu.org/software/emacs/manual/html_mono/org.html#Template-expansion][here]].
   #+begin_src emacs-lisp
     (setq org-capture-templates
           '(("t" "Todo" entry (file+headline "~/.emacs.d/todo.org" "Tasks")
              "* TODO %?\n %i\n %a")
             ("j" "Journal" entry (file+olp+datetree "~/.emacs.d/journal.org")
              "* %?nEntered on %U\n %i\n %a")
             ("b" "Buy" entry (file+headline "~/.emacs.d/todo.org" "Buy")
              "* TODO %?\n %i\n")))
   #+end_src

** Sync across devices
     To enable same spacemacs configuration across the computers, personal configuration files are located at ~$HOME/.emacs.d~ folder and shared by Github. [[https://beorgapp.com][Beorg]] is an iOS app to use org mode todo tasks in iOS devices. ~todo.org~ file should be located at some clouds system to sync to iPhone (my company blocks Dropbox...). Symbolic link is a good solution to link ~todo.org~ local file to ~todo.org~ in the cloud.
    #+begin_example
     $ ln -s ~/.emacs.d/todo.org path/to/google-drive/todo.org
    #+end_example
